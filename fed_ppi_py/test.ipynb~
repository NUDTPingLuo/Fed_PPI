{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da97c7a181ae0e4d",
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:05.376949100Z",
     "start_time": "2024-06-15T01:34:03.078199Z"
    }
   },
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "attempted relative import with no known parent package",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mImportError\u001B[0m                               Traceback (most recent call last)",
      "File \u001B[1;32m~\\OneDrive\\桌面\\第二篇\\ppi_py-main\\ppi_py-main\\ppi_py\\ppi.py:9\u001B[0m\n\u001B[0;32m      7\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mstatsmodels\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mstats\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mweightstats\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m _zconfint_generic, _zstat_generic\n\u001B[0;32m      8\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mlinear_model\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m LogisticRegression\n\u001B[1;32m----> 9\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mutils\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m (\n\u001B[0;32m     10\u001B[0m     construct_weight_vector,\n\u001B[0;32m     11\u001B[0m     safe_expit,\n\u001B[0;32m     12\u001B[0m     safe_log1pexp,\n\u001B[0;32m     13\u001B[0m     compute_cdf,\n\u001B[0;32m     14\u001B[0m     compute_cdf_diff,\n\u001B[0;32m     15\u001B[0m     dataframe_decorator,\n\u001B[0;32m     16\u001B[0m     linfty_dkw,\n\u001B[0;32m     17\u001B[0m     linfty_binom,\n\u001B[0;32m     18\u001B[0m     form_discrete_distribution,\n\u001B[0;32m     19\u001B[0m     reshape_to_2d,\n\u001B[0;32m     20\u001B[0m )\n\u001B[0;32m     23\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mrectified_p_value\u001B[39m(\n\u001B[0;32m     24\u001B[0m     rectifier,\n\u001B[0;32m     25\u001B[0m     rectifier_std,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m     29\u001B[0m     alternative\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mtwo-sided\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[0;32m     30\u001B[0m ):\n\u001B[0;32m     31\u001B[0m \u001B[38;5;250m    \u001B[39m\u001B[38;5;124;03m\"\"\"Computes a rectified p-value.\u001B[39;00m\n\u001B[0;32m     32\u001B[0m \n\u001B[0;32m     33\u001B[0m \u001B[38;5;124;03m    Args:\u001B[39;00m\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m     42\u001B[0m \u001B[38;5;124;03m        float or ndarray: P-value.\u001B[39;00m\n\u001B[0;32m     43\u001B[0m \u001B[38;5;124;03m    \"\"\"\u001B[39;00m\n",
      "\u001B[1;31mImportError\u001B[0m: attempted relative import with no known parent package"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Split 1: Y range from 0.00010132492752745748 to 0.015242121182382107\n",
      "Split 2: Y range from 0.015242393128573895 to 0.04439326375722885\n",
      "Split 3: Y range from 0.044401440769433975 to 0.15375055372714996\n",
      "Split 4: Y range from 0.15376797318458557 to 0.5576987862586975\n",
      "Split 5: Y range from 0.5578726530075073 to 0.9999994039535522\n"
     ]
    }
   ],
   "source": [
    "%run ppi_py/ppi.py\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from ppi_py import ppi_mean_ci, ppi_mean_ci_FL, combine_var \n",
    "from ppi_py.datasets import load_dataset\n",
    "from statsmodels.stats.weightstats import _zconfint_generic\n",
    "\n",
    "# 为了确保结果的可重复性\n",
    "np.random.seed(0)\n",
    "\n",
    "# 下载并加载数据集\n",
    "data = load_dataset('./data/', \"galaxies\")\n",
    "Y_total = data[\"Y\"]\n",
    "Yhat_total = data[\"Yhat\"]\n",
    "\n",
    "is_iid = False\n",
    "\n",
    "# 设置推断问题的参数\n",
    "alpha = 0.1  # 错误率（10%的显著性水平）\n",
    "labeled_ratio = 0.1  # 每份有标签数据点的数量占比\n",
    "alternative=\"two-sided\"\n",
    "# 将数据分成五份\n",
    "num_splits = 5\n",
    "num_ratio = [1,1,1,1,1]  # 数据量分布平衡\n",
    "# num_ratio = [1,2,3,3,1]  # 数据量分布不平衡\n",
    "\n",
    "def split_array_by_ratio(arr, ratios):\n",
    "    total = sum(ratios)\n",
    "    lengths = [int(len(arr) * ratio / total) for ratio in ratios]\n",
    "    \n",
    "    # Adjust the lengths to make sure the sum matches the original array length\n",
    "    diff = len(arr) - sum(lengths)\n",
    "    for i in range(diff):\n",
    "        lengths[i % len(lengths)] += 1\n",
    "    \n",
    "    return np.array_split(arr, np.cumsum(lengths)[:-1])\n",
    "\n",
    "if is_iid:\n",
    "    # 随机打乱数据索引\n",
    "    rand_idx = np.random.permutation(Y_total.shape[0])\n",
    "    split_indices = split_array_by_ratio(rand_idx, num_ratio)\n",
    "else:\n",
    "    # 根据Y值范围分成五份数据\n",
    "    sorted_idx = np.argsort(Yhat_total)\n",
    "    split_indices = split_array_by_ratio(sorted_idx, num_ratio)\n",
    "    # 输出每个分割的Y值范围\n",
    "    for i, indices in enumerate(split_indices):\n",
    "        min_Y = Yhat_total[indices[0]]\n",
    "        max_Y = Yhat_total[indices[-1]]\n",
    "        print(f\"Split {i+1}: Y range from {min_Y} to {max_Y}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "带标签的样本量： 334\n",
      "不带标签的样本量： 3015\n",
      "\n",
      "分组 1: 预测 theta=[0.01814834], CPP=(array([0.00621862]), array([0.03007806]))\n",
      "\n",
      "估算方差 var=[4.16532018e-09], 调整方差 var=[5.25983e-05]\n",
      "带标签的样本量： 334\n",
      "不带标签的样本量： 3015\n",
      "\n",
      "分组 2: 预测 theta=[0.02340878], CPP=(array([0.00969447]), array([0.0371231]))\n",
      "\n",
      "估算方差 var=[2.25748806e-08], 调整方差 var=[6.94948544e-05]\n",
      "带标签的样本量： 334\n",
      "不带标签的样本量： 3015\n",
      "\n",
      "分组 3: 预测 theta=[0.0869466], CPP=(array([0.06165804]), array([0.11223516]))\n",
      "\n",
      "估算方差 var=[9.7304483e-08], 调整方差 var=[0.00023627]\n",
      "带标签的样本量： 334\n",
      "不带标签的样本量： 3014\n",
      "\n",
      "分组 4: 预测 theta=[0.2940893], CPP=(array([0.25471769]), array([0.3334609]))\n",
      "\n",
      "估算方差 var=[4.21754534e-06], 调整方差 var=[0.00056873]\n",
      "带标签的样本量： 334\n",
      "不带标签的样本量： 3014\n",
      "\n",
      "分组 5: 预测 theta=[0.83467333], CPP=(array([0.80276578]), array([0.86658089]))\n",
      "\n",
      "估算方差 var=[4.84878049e-06], 调整方差 var=[0.00037145]\n"
     ]
    }
   ],
   "source": [
    "# 存储所有有标签和无标签数据\n",
    "Yhat_labeled_all = []\n",
    "Y_labeled_all = []\n",
    "Yhat_unlabeled_all = []\n",
    "Yhat_unlabeled_mean_all = []\n",
    "theta_values = []\n",
    "cpp_intervals = []\n",
    "\n",
    "# 存储预估点和方差\n",
    "ppi_pointest_all = []\n",
    "imputed_var_all = []\n",
    "rectifier_var_all = []\n",
    "datasize_i_all = []\n",
    "\n",
    "# 循环处理每一份数据\n",
    "for i, indices in enumerate(split_indices):\n",
    "    # 在当前份中随机选择有标签数据\n",
    "    labeled_num = int(np.floor(labeled_ratio * len(indices)))\n",
    "    labeled_indices = np.random.choice(indices, labeled_num, replace=False)\n",
    "    unlabeled_indices = np.setdiff1d(indices, labeled_indices)\n",
    "    \n",
    "    # 有标签数据\n",
    "    Yhat_labeled = Yhat_total[labeled_indices]\n",
    "    Y_labeled = Y_total[labeled_indices]\n",
    "    print('带标签的样本量：', len(Y_labeled))\n",
    "    \n",
    "    # 无标签数据\n",
    "    Yhat_unlabeled = np.array(Yhat_total[unlabeled_indices])\n",
    "    print('不带标签的样本量：', len(Yhat_unlabeled))\n",
    "    \n",
    "    # 存储每份数据\n",
    "    Yhat_labeled_all.append(Yhat_labeled)\n",
    "    Y_labeled_all.append(Y_labeled)\n",
    "    Yhat_unlabeled_all.append(Yhat_unlabeled)\n",
    "    Yhat_unlabeled_mean_all.append(Yhat_unlabeled.mean())\n",
    "    \n",
    "    # 存储样本大小\n",
    "    datasize_i = len(Y_labeled) + len(Yhat_unlabeled)\n",
    "    datasize_i_all.append(datasize_i)\n",
    "    \n",
    "    # 计算预测支持的置信区间\n",
    "    ppi_ci = ppi_mean_ci(Y_labeled, Yhat_labeled, Yhat_unlabeled, alpha=alpha)\n",
    "    ppi_pointest, imputed_var, rectifier_var = ppi_mean_ci_FL(Y_labeled, Yhat_labeled, Yhat_unlabeled, alpha=alpha)\n",
    "    \n",
    "    # 存储每份预估点和方差\n",
    "    ppi_pointest_all.append(ppi_pointest)\n",
    "    imputed_var_all.append(imputed_var)\n",
    "    rectifier_var_all.append(rectifier_var)\n",
    "    \n",
    "    # 存储每份数据的均值和置信区间\n",
    "    theta_values.append(ppi_pointest)\n",
    "    cpp_intervals.append(ppi_ci)\n",
    "    \n",
    "    # 打印每份数据的结果\n",
    "    print(f\"\\n分组 {i+1}: 预测 theta={ppi_pointest}, CPP={ppi_ci}\")\n",
    "    print(f\"\\n估算方差 var={imputed_var}, 调整方差 var={rectifier_var}\")"
   ],
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:05.420529200Z",
     "start_time": "2024-06-15T01:34:05.380463600Z"
    }
   },
   "id": "3c557d6e-cfa0-44a0-9684-582197966254"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1b4701d3-777b-4a70-879e-34c590f98479",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:05.420529200Z",
     "start_time": "2024-06-15T01:34:05.408529200Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "各节点上纠正偏差平均值: [-0.00904225  0.0034994  -0.00151405  0.02041758  0.0312234 ]\n",
      "\n",
      "联邦学习后 theta=[0.25141589], 平均 CPP=(array([0.22481708]), array([0.2780147]))\n",
      "\n",
      "联邦学习后估算方差 var=[1.83749082e-06], 调整方差 var=[0.00025966]\n"
     ]
    }
   ],
   "source": [
    "# 计算每个节点上数据量占比\n",
    "total_datasize = np.sum(datasize_i_all)\n",
    "proportions = datasize_i_all / total_datasize\n",
    "\n",
    "# 计算平均theta值\n",
    "ppi_pointest_all = np.array(ppi_pointest_all)\n",
    "imputed_var_all = np.array(imputed_var_all)\n",
    "rectifier_var_all = np.array(rectifier_var_all)\n",
    "\n",
    "ppi_pointest_mean = np.dot(proportions, ppi_pointest_all)\n",
    "\n",
    "# 计算样本平均值\n",
    "# Yhat_labeled_mean_all = np.array(Yhat_labeled_all).mean(axis=1)\n",
    "Yhat_labeled_mean_all = [np.mean(sub_array) for sub_array in Yhat_labeled_all]\n",
    "# Y_labeled_mean_all = np.array(Y_labeled_all).mean(axis=1)\n",
    "Y_labeled_mean_all = [np.mean(sub_array) for sub_array in Y_labeled_all]\n",
    "\n",
    "rectifier_mean_all = np.subtract(Yhat_labeled_mean_all, Y_labeled_mean_all)\n",
    "print(\"各节点上纠正偏差平均值:\", rectifier_mean_all)\n",
    "\n",
    "imputed_var_mean_all = combine_var(Yhat_unlabeled_mean_all, datasize_i_all, imputed_var_all)\n",
    "rectifier_var_mean_all = combine_var(rectifier_mean_all, datasize_i_all, rectifier_var_all)\n",
    "\n",
    "# 计算五份数据置信区间的平均值\n",
    "mean_cpp = _zconfint_generic(\n",
    "        ppi_pointest_mean,\n",
    "        np.sqrt(imputed_var_mean_all + rectifier_var_mean_all),\n",
    "        alpha,\n",
    "        alternative,\n",
    "    )\n",
    "\n",
    "# 打印不直接组合数据的theta值和置信区间\n",
    "print(f\"\\n联邦学习后 theta={ppi_pointest_mean}, 平均 CPP={mean_cpp}\")\n",
    "print(f\"\\n联邦学习后估算方差 var={imputed_var_mean_all}, 调整方差 var={rectifier_var_mean_all}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fdf4e446-32aa-4c5e-88ca-284e5062c95c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:05.459664800Z",
     "start_time": "2024-06-15T01:34:05.421529900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "合并后的方差: 4.0249999999999995\n"
     ]
    }
   ],
   "source": [
    "# 测试combine_var函数\n",
    "sample_mean = [4, 2, 3]\n",
    "sample_counts = [3, 1, 2]\n",
    "sample_variances = [4.3, 2.1, 3.2]\n",
    "combined_variance = combine_var(sample_mean, sample_counts, sample_variances)\n",
    "print(f\"合并后的方差: {combined_variance}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5c16f745-2984-4f0f-82de-194ac342cd46",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:05.485181Z",
     "start_time": "2024-06-15T01:34:05.438665Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "带标签的样本量： 1670\n",
      "不带标签的样本量： 15073\n",
      "\n",
      "组合数据后 theta=[0.25131443], CPP=(array([0.23878086]), array([0.263848]))\n",
      "\n",
      "组合数据后估算方差 var=[5.34987795e-06], 调整方差 var=[5.27125557e-05]\n",
      "\n",
      "真实 theta=0.2592725318043361\n"
     ]
    }
   ],
   "source": [
    "# 将所有有标签和无标签数据组合成新的数据集\n",
    "Yhat_labeled_combined = np.concatenate(Yhat_labeled_all)\n",
    "Y_labeled_combined = np.concatenate(Y_labeled_all)\n",
    "Yhat_unlabeled_combined = np.concatenate(Yhat_unlabeled_all)\n",
    "\n",
    "print('带标签的样本量：', len(Y_labeled_combined))\n",
    "print('不带标签的样本量：', len(Yhat_unlabeled_combined))\n",
    "\n",
    "# 计算新的组合数据集的预测支持的置信区间\n",
    "ppi_ci_combined = ppi_mean_ci(Y_labeled_combined, Yhat_labeled_combined, Yhat_unlabeled_combined, alpha=alpha)\n",
    "ppi_pointest_combined, imputed_var_combined, rectifier_var_combined = ppi_mean_ci_FL(Y_labeled_combined, Yhat_labeled_combined, Yhat_unlabeled_combined, alpha=alpha)\n",
    "\n",
    "# 打印新的组合数据集的平均theta值和置信区间\n",
    "print(f\"\\n组合数据后 theta={ppi_pointest_combined}, CPP={ppi_ci_combined}\")\n",
    "print(f\"\\n组合数据后估算方差 var={imputed_var_combined}, 调整方差 var={rectifier_var_combined}\")\n",
    "# 计算真实值\n",
    "true_theta = Y_total.mean()\n",
    "print(f\"\\n真实 theta={true_theta:}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "df368fde-7527-487a-989a-fa8b0b1658e1",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:06.262611400Z",
     "start_time": "2024-06-15T01:34:05.473670400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 绘制图形\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.xlim(0, 1.0)\n",
    "\n",
    "# 绘制各个分组的置信区间\n",
    "for i, (theta, cpp) in enumerate(zip(theta_values, cpp_intervals)):\n",
    "    plt.plot([cpp[0], cpp[1]], [i, i], 'bo-', label='Confidence Interval at Node' if i == 0 else \"\")\n",
    "\n",
    "# 绘制组合数据的置信区间\n",
    "plt.plot([ppi_ci_combined[0], ppi_ci_combined[1]], [num_splits, num_splits], 'ro-', label='Combined Data')\n",
    "\n",
    "# 绘制五份数据的平均置信区间\n",
    "plt.plot([mean_cpp[0], mean_cpp[1]], [num_splits + 1, num_splits + 1], 'go-', label='FL Aggregation')\n",
    "\n",
    "# 绘制真实值的竖虚线\n",
    "plt.axvline(true_theta, color='k', linestyle='--', label=f'True Theta = {true_theta:.3f}')\n",
    "\n",
    "# 标注图形\n",
    "plt.xlabel('Theta')\n",
    "plt.ylabel('Groups')\n",
    "plt.yticks(range(num_splits + 2), ['Node {i+1}' for i in range(num_splits)] + ['Combined', 'FL'])\n",
    "plt.title('Confidence Intervals for Each Node, Combined Data, and FL Aggregation')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.savefig('test.png',dpi=600)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6d581c25-e369-4a74-a16f-5827a50e0be4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:06.566591500Z",
     "start_time": "2024-06-15T01:34:06.268614200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 300x350 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%run examples/utils.py\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from examples import utils\n",
    "\n",
    "# 假设以下变量已经定义：theta_values, cpp_intervals, ppi_ci_combined, mean_cpp, true_theta, num_splits\n",
    "\n",
    "# 创建一个包含结果的 DataFrame\n",
    "results = []\n",
    "\n",
    "# 各个分组的置信区间\n",
    "for i, (theta, cpp) in enumerate(zip(theta_values, cpp_intervals)):\n",
    "    results.append(pd.DataFrame([{\n",
    "        'method': 'Node',\n",
    "        'n': i,\n",
    "        'lower': cpp[0],\n",
    "        'upper': cpp[1],\n",
    "        'trial': 0\n",
    "    }]))\n",
    "\n",
    "# 组合数据的置信区间\n",
    "results.append(pd.DataFrame([{\n",
    "    'method': 'Combined',\n",
    "    'n': num_splits,\n",
    "    'lower': ppi_ci_combined[0],\n",
    "    'upper': ppi_ci_combined[1],\n",
    "    'trial': 0\n",
    "}]))\n",
    "\n",
    "# 五份数据的平均置信区间\n",
    "results.append(pd.DataFrame([{\n",
    "    'method': 'FL Aggregation',\n",
    "    'n': num_splits + 1,\n",
    "    'lower': mean_cpp[0],\n",
    "    'upper': mean_cpp[1],\n",
    "    'trial': 0\n",
    "}]))\n",
    "\n",
    "# 合并所有结果\n",
    "df = pd.concat(results, axis=0, ignore_index=True)\n",
    "df['width'] = df['upper'] - df['lower']\n",
    "\n",
    "# 绘制图形\n",
    "utils.make_plots_fl(\n",
    "    df,\n",
    "    \"test.pdf\",  # 保存路径\n",
    "    n_idx=num_splits,  # 对应的分组数量\n",
    "    intervals_xlabel=\"Fraction of spiral galaxies\",\n",
    "    true_theta=true_theta\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-06-15T01:34:06.594082100Z",
     "start_time": "2024-06-15T01:34:06.563538200Z"
    }
   },
   "id": "9e4c17479222732"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
